glimpse(num)
# Exclude missing - 134 cases
num <- na.omit(num)
# log transformation
# Exclude zero variance feature
head(num[ , which(apply(num, 2, var) == 0)])  #None
# Creating train and test set  ? train:test:validation  70:15:15
set.seed(1)
train.index <- createDataPartition(num$FU1_case, p = .8, list = FALSE)   #error when unique(as.numeric(raw$thyroid))
#train.index[1] == dat5$thyroid
train <- num[train.index,] %>% #128425
mutate(index = "train")
test <- num[-train.index,] %>%
mutate(index = "test") #32106
#PCA
# ?Scaling or normalization
pca <- prcomp(train[,1:36], scale=T)   # 3:182 * scale=T,  cor=? #Scaling, compare with the result ..manual scale
#pca <- prcomp(train_obs[,20:151])   #* scale=T,  cor=?
glimpse(pca)
pca$x[1:6, 1:6]
pca$sdev
# get variance of each PC
pr_var  <- (pca$sdev)^2
# compute variance explained by each PC
prop_varex <- pr_var/sum(pr_var)
prop_varex
#### Plots ####
# Bring a bar plot - quick plot for vector object
barplot(prop_varex, names.arg = colnames(pca$x),
xlab = "Principal Component",
ylab = "Proportion of Variance Explained")
# For the cumulative variance explained:
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
# Plot the reduction of data variance to 2 first components
# install.packages("ggrepel")
library(ggrepel)
# To see that the principal components are actually capturing something important
pcs <- data.frame(pca$rotation, name = colnames(num[,1:36]))
# pcs %>% data.frame(.,
#                    Sample = rownames(pcs),
#                    group = train_obs[match(rownames(pca$x), train_obs$cancer.center.No.) , "group"]) %>%
## TT ref
pcs%>% ggplot(aes(PC1, PC2,label=name)) +
geom_point() +
geom_text_repel()#aes(PC1, PC2),		# The first principle component PC1 shows the difference between critically acclaimed movies on one side.
#data = filter(pcs, 			#PC2: artsy independent films vs. nerd favorites
#              PC1 < -0.1 | PC1 > 0.1 | PC2 < -0.075 | PC2 > 0.1))  #CHECK
pcs%>% ggplot(aes(PC3, PC4,label=name)) +
geom_point() +
geom_text_repel()
#install.packages("factoextra")
library(factoextra)
var <- get_pca_var(pca)
var
#install.packages("corrplot")
library("corrplot")
#corrplot(var$cos2, is.corr=FALSE)  #TOO many features
#install.packages("gridExtra")
library(gridExtra)
p1 <- fviz_contrib(pca, choice="var", axes=1, fill="pink", color="grey", top=10)
p2 <- fviz_contrib(pca, choice="var", axes=2, fill="skyblue", color="grey", top=10)
grid.arrange(p1,p2,ncol=2)
######################
# PCRegression
#add a training set with principal components
train0 <- data.frame(FU1_case = train$FU1_case, month_per = train$month_per, pca$x)
#we are interested in first 5 PCAs
train1 <- train0[,1:7]      #?number of PCs for tuning later
cox.model <- coxph(Surv(month_per, FU1_case==1)~., data=train1)
cox.model
#transform test into PCA
test0 <- predict(pca, newdata = test)
test0 <- as.data.frame(test0)
test1 <- data.frame(FU1_case = test$FU1_case, month_per = test$month_per, test0)
#select the first 5 components?
test2 <- test0[,1:5]     #!!!remember to remove outcome
## Make prediction on test data and calculate c-index:
# Compare the c-indices of rcorr.cens and summary(cox.model)
# https://stats.stackexchange.com/questions/254375/concordance-index-in-survival-and-rms-packages
train_obj <- Surv(time = train1$month_per, event = train1$FU1_case)
train_validation <-  predict(cox.model, newdata = train1[,3:7])
# predict() is a part of hazard function, while train_obj is a survival object.
# Survival and hazard have opposite directions, therefore, train_validation is multiplied by (-1)
rcorr.cens(x=train_validation*-1, S=train_obj)
summary(cox.model)  #concordance(cox.model)
# Create survival estimates on validation data
pred_validation <-  predict(cox.model, newdata = test2)
# c-index
rcorr.cens(x=pred_validation*-1, S=Surv(time = test1$month_per, event = test1$FU1_case))['C Index']
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
c_cal <- function(n_factor){
train_data <- train0[,1:(n_factor+2)]
model <- coxph(Surv(month_per, FU1_case==1)~., data=train_data)
test_data <- test0[,1:n_factor]
pred_validation <-  predict(cox.model, newdata = test_data)
c_index <- rcorr.cens(x=pred_validation*-1, S=Surv(time = test1$month_per, event = test1$FU1_case))['C Index']
return(c_index)
}
c_ca;(6)
c_cal(6)
c_cal(5)
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
c_cal <- function(n_factor){
train_data <- train0[,1:(n_factor+2)]
model <- coxph(Surv(month_per, FU1_case==1)~., data=train_data)
test_data <- test0[,1:n_factor]
pred_val <-  predict(cox.model, newdata = test_data)
c_index <- rcorr.cens(x=pred_val*-1, S=Surv(time = test1$month_per, event = test1$FU1_case))['C Index']
return(c_index)
}
c_cal(6)
c_cal(5)
c_cal(10)
#select the first 5 components?
test2 <- test0[,1:10]     #!!!remember to remove outcome
# Create survival estimates on validation data
pred_validation <-  predict(cox.model, newdata = test2)
# c-index
rcorr.cens(x=pred_validation*-1, S=Surv(time = test1$month_per, event = test1$FU1_case))['C Index']
#select the first 5 components?
test2 <- test0[,1]     #!!!remember to remove outcome
# Create survival estimates on validation data
pred_validation <-  predict(cox.model, newdata = test2)
#select the first 5 components?
test2 <- test0[,1:2]     #!!!remember to remove outcome
# Create survival estimates on validation data
pred_validation <-  predict(cox.model, newdata = test2)
#we are interested in first 5 PCAs
train1 <- train0[,1:4]      #?number of PCs for tuning later
cox.model <- coxph(Surv(month_per, FU1_case==1)~., data=train1)
#transform test into PCA
test0 <- predict(pca, newdata = test)
test0 <- as.data.frame(test0)
test1 <- data.frame(FU1_case = test$FU1_case, month_per = test$month_per, test0)
#select the first 5 components?
test2 <- test0[,1:2]     #!!!remember to remove outcome
# Create survival estimates on validation data
pred_validation <-  predict(cox.model, newdata = test2)
# c-index
rcorr.cens(x=pred_validation*-1, S=Surv(time = test1$month_per, event = test1$FU1_case))['C Index']
c_cal(2)
c_cal(5)
pca
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
c_cal <- function(n_factor){
train_data <- train0[,1:(n_factor+2)]
model <- coxph(Surv(month_per, FU1_case==1)~., data=train_data)
test_0 <- predict(pca, newdata = test)
test_0 <- as.data.frame(test0)
#test1 <- data.frame(FU1_case = test$FU1_case, month_per = test$month_per, test0)
test_data <- test0[,1:n_factor]
pred_val <-  predict(cox.model, newdata = test_data)
c_index <- rcorr.cens(x=pred_val*-1, S=Surv(time = test$month_per, event = test$FU1_case))['C Index']
return(c_index)
}
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
c_cal <- function(n_factor){
train_data <- train0[,1:(n_factor+2)]
model <- coxph(Surv(month_per, FU1_case==1)~., data=train_data)
test_0 <- predict(pca, newdata = test)
test_0 <- as.data.frame(test0)
#test1 <- data.frame(FU1_case = test$FU1_case, month_per = test$month_per, test0)
test_data <- test_0[,1:n_factor]
pred_val <-  predict(cox.model, newdata = test_data)
c_index <- rcorr.cens(x=pred_val*-1, S=Surv(time = test$month_per, event = test$FU1_case))['C Index']
return(c_index)
}
c_cal(6)
c_cal(5)
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
c_cal <- function(n_factor){
train_data <- train0[,1:(n_factor+2)]
model <- coxph(Surv(month_per, FU1_case==1)~., data=train_data)
t_0 <- predict(pca, newdata = test)
t_0 <- as.data.frame(t_0)
#test1 <- data.frame(FU1_case = test$FU1_case, month_per = test$month_per, test0)
test_data <- t_0[,1:n_factor]
pred_val <-  predict(cox.model, newdata = test_data)
c_index <- rcorr.cens(x=pred_val*-1, S=Surv(time = test$month_per, event = test$FU1_case))['C Index']
return(c_index)
}
c_cal(6)
c_cal(5)
c_cal(10)
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
c_cal <- function(n_factor){
# PCRegression
#add a training set with principal components
train0 <- data.frame(FU1_case = train$FU1_case, month_per = train$month_per, pca$x)
train_data <- train0[,1:(n_factor+2)]
model <- coxph(Surv(month_per, FU1_case==1)~., data=train_data)
t_0 <- predict(pca, newdata = test)
t_0 <- as.data.frame(t_0)
#test1 <- data.frame(FU1_case = test$FU1_case, month_per = test$month_per, test0)
test_data <- t_0[,1:n_factor]
pred_val <-  predict(model, newdata = test_data)
c_index <- rcorr.cens(x=pred_val*-1, S=Surv(time = test$month_per, event = test$FU1_case))['C Index']
return(c_index)
}
c_cal(6)
c_cal(5)
c_cal(10)
c_cal(20)
apply(1:36,c_cal)
apply(1:36,1,c_cal)
sapply(1:36,c_cal)
apply(1:36,2,c_cal)
1:5
lapply(1:36,c_cal)
class()
class(1:5)
c(1:5)
class(c(1:5))
lapply(c(1:36),c_cal)
?apply
array(as.numeric(unlist(mylist)), dim=c(14, 5, 10))
mylist <- lapply(1:50, function(i) sample((1:14)/10, 14, repl=TRUE))
array(as.numeric(unlist(mylist)), dim=c(14, 5, 10))
apply(as.data.frame(1:36),1,c_cal)
as.data.frame(1:36)
apply(as.data.frame(1:36),2,c_cal)
apply(as.data.frame(1:36),c_cal)
lapply(as.data.frame(1:36),c_cal)
lapply(as.list(1:36),c_cal)
c(1:5)
sapply(c(1:36),c_cal)
sapply(c(1,2,3,4),c_cal)
for(i in 1:36){
c_cal(i)
}
c_cal(6)
for(i in 1:36){
print(i)
}
for(i in 1:36){
print(c_cal(i))
}
for(i in 1:30){
print(c_cal(i))
}
for(i in 1:30){
print(c_cal(i))
}
for(i in 1:10){
print(c_cal(i))
}
return(c_index)
for(i in 1:10){
c_cal(i)
}
head(train)
colnames(train)
colnames(pca)
#PCA
# ?Scaling or normalization
pca <- prcomp(train[,1:36], scale=T)   # 3:182 * scale=T,  cor=? #Scaling, compare with the result ..manual scale
glimpse(pca)
colnames(pca$x)
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
c_cal <- function(n_factor){
# PCRegression
#add a training set with principal components
tr_0 <- data.frame(FU1_case = train$FU1_case, month_per = train$month_per, pca$x)
train_data <- tr_0[,1:(n_factor+2)]
model <- coxph(Surv(month_per, FU1_case==1)~., data=train_data)
t_0 <- predict(pca, newdata = test)
t_0 <- as.data.frame(t_0)
#test1 <- data.frame(FU1_case = test$FU1_case, month_per = test$month_per, test0)
test_data <- t_0[,1:n_factor]
pred_val <-  predict(model, newdata = test_data)
c_index <- rcorr.cens(x=pred_val*-1, S=Surv(time = test$month_per, event = test$FU1_case))['C Index']
return(c_index)
}
for(i in 1:10){
c_cal(i)
}
1:10
a <- 1:10
class(a)
class(a[1])
glimpse(a)
c_cal(1)
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
c_cal <- function(n_factor){
# PCRegression
#add a training set with principal components
tr_0 <- data.frame(FU1_case = train$FU1_case, month_per = train$month_per, pca$x)
train_data <- tr_0[,1:(n_factor+2)]
model <- coxph(Surv(month_per, FU1_case==1)~., data=train_data)
t_0 <- predict(pca, newdata = test)
t_0 <- as.data.frame(t_0)
#test1 <- data.frame(FU1_case = test$FU1_case, month_per = test$month_per, test0)
test_data <- t_0[,1:n_factor]
pred_val <-  predict(model, newdata = test_data)
c_index <- rcorr.cens(x=pred_val*-1, S=Surv(time = test$month_per, event = test$FU1_case))['C Index']
return(c_index)
}
c_cal((6))
c_cal(6)
for(i in 1:10){
c_cal(i)
}
sapply(1:10, c_cal)
lapply(1:10, c_cal)
for(i in 1:10){
c_cal(i)
i = i +1
}
# for(i in 1:10){
#   c_cal(i)
# }
c_index <- (c_cal(1), c_cal(2))
# for(i in 1:10){
#   c_cal(i)
# }
c_index <- c(c_cal(1), c_cal(2))
class(c_cal(1))
c_cal(1)
c_cal()
c_cal(2)
for(i in 2:10){
c_cal(i)
}
lapply(2:10, c_cal)
sapply(2:10, c_cal)
c_cal(1)
sapply(2:36, c_cal)  #Error with value 1: 'data' must be a data.frame, environment, or list
screeplot(pca, npcs = min(10, length(pca$sdev)),
type = c("barplot", "lines"),
main = deparse(substitute(pca)))
c_indx <- sapply(2:36, c_cal)  #Error with value 1: 'data' must be a data.frame, environment, or list
c_indx
plot(2:36, c_indx, type="l")
surv_dii(DS_M)
surv_dii(DS_W)
surv_dii(DS_NS)  #?WHY error
cov_train <- ds[train.index,c(sex,age_c,Smoke, Alcoholgp, DS1_DM, Active)]
cov_train <- ds[train.index,c('sex','age_c','Smoke', 'Alcoholgp', 'DS1_DM', 'Active')]
head(cov_train)
length(train)
length(train[,1])
length(cov_train[,1])
tr_0 <- data.frame(FU1_case = train$FU1_case, month_per = train$month_per, pca$x, cov_train)
colnames(tr_0)
colnames(pca$x)
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
cov_train <- ds[train.index,c(sex,age_c,Smoke, Alcoholgp, DS1_DM, Active)]
cov_test <- ds[-train.index,c(sex,age_c,Smoke, Alcoholgp, DS1_DM, Active)]
pcs_test <- as.data.frame(predict(pca, newdata = test))
colnames(ds)
#### Tuning and evaluation####
# ? Compare accuracy between total DII model and PCR
#https://www.biostars.org/p/109215/
#https://cran.r-project.org/web/packages/survival/vignettes/concordance.pdf
cov_train <- ds[train.index,c('sex','age_c','Smoke', 'Alcoholgp', 'DS1_DM', 'Active')]
cov_test <- ds[-train.index,c('sex','age_c','Smoke', 'Alcoholgp', 'DS1_DM', 'Active')]
pcs_test <- as.data.frame(predict(pca, newdata = test))
c_pca <- function(n_factor){
train_data <- data.frame(pca$x[,1:n_factor],
FU1_case = train$FU1_case,
month_per = train$month_per,
cov_train)
model <- coxph(Surv(month_per, FU1_case==1)~., data=train_data)
test_data <- data.frame(pcs_test[,1:n_factor],
FU1_case = test$FU1_case,
month_per = test$month_per,
cov_test)
pred_val <-  predict(model, newdata = test_data)
c_index <- rcorr.cens(x=pred_val*-1, S=Surv(time = test$month_per, event = test$FU1_case))['C Index']
return(c_index)
}
c_indx <- sapply(2:36, c_pca)  #Error with value 1: 'data' must be a data.frame, environment, or list
length(cov_test[,1])
length(cov_train[,1])
length(train[,1])
length(test[,1])
length(ds[,1])
length(num[,1])
cov_test <- na.omit(ds[-train.index,c('sex','age_c','Smoke', 'Alcoholgp', 'DS1_DM', 'Active')]) #?check if indices of these 2 sets match train/test set
length(cov_test[,1])
View(test)
View(train.index)
View(ds)
##### Main analysis #####
rownames(ds) <- ds$RID
num <- ds %>%       # is.na(DIINORMAL) and is.na(month_per) were retained
dplyr::select(c(vitamin_B12, vitamin_B6, carotene, caffeine, carbohydrate, cholesterol, total_fat, fiber, folic_acid,  # only 36?
garlic, fe, mg, MUFA, niacin, n_3_fatty_acides, n_6_fatty_acides, onion, protein, PUFA,
riboflavin, saturated_fat, se, thiamin, trans_fat, vitamin_A, vitamin_C, vitamin_D, vitamin_E, Zn,
Green_black_tea, Flavan_3_ol,  Flavones, Flavonols, Flavonones, Anthocyanidins, Isoflavones, FU1_case, month_per))  #60234, ?compare result when month_per NA <- 0
# Exclude missing - 134 cases
num <- na.omit(num)
# Exclude zero variance feature
head(num[ , which(apply(num, 2, var) == 0)])  #None
# Creating train and test set  ? train:test:validation  70:15:15
set.seed(1)
train.index <- createDataPartition(num$FU1_case, p = .8, list = FALSE)   #error when unique(as.numeric(raw$thyroid))
View(train.index)
#train.index[1] == dat5$thyroid
train <- num[train.index,] %>% #128425
mutate(index = "train")
test <- num[-train.index,] %>%
mutate(index = "test") #32106
View(test)
View(num)
train.index <- createDataPartition(num$FU1_case, p = .8, list = FALSE)   #error when unique(as.numeric(raw$thyroid))
#train.index[1] == dat5$thyroid
train <- num[train.index,] %>% #128425
mutate(index = "train")
View(train)
?createDataPartition
library(tidyverse)
library(ggplot2)
library(stringr)
#library(lubridate)
setwd("C:/Users/ngocdung/Dropbox/Front-end developer/src/data-science-path/udacity-nanodegree/Project 2/Support materials")
list.files()
month_sales <- read.csv("p2-2010-pawdacity-monthly-sales-p2-2010-pawdacity-monthly-sales.csv", stringsAsFactors = F)
population <- read.csv("p2-partially-parsed-wy-web-scrape.csv", stringsAsFactors = F)
naics <- read.csv("p2-wy-453910-naics-data.csv", stringsAsFactors = F)
demographic <- read.csv("p2-wy-demographic-data.csv", stringsAsFactors = F)
#### Data wrangling ####
# Separate two columns by "|", rename some columns, remove N/A rows
population2 <- population %>%
separate(col=City.County,into=c("City","County"), sep='\\|') %>%   #"|" is a special character, escape twice
#str_replace_all(.$City," \\?","") %>%
mutate(
Estimate = parse_number(X2014.Estimate),
Census2010 = parse_number(X2010.Census),
Census2000 = parse_number(X2000.Census)) %>%
filter(City!='')
# Remove ?" characters
population2["City"] <- str_replace_all(population2$City,"\\?","")
# Remove trailing whitespace
population2["City"] <- trimws(population2$City)   #unique()
# Merge datasets by City
month_sales2 <- month_sales %>%
mutate(City = CITY) %>%
merge(., population2[which(colnames(population2) %in% c("City","Census2010"))], by="City") %>%
merge(., demographic, by="City") %>%
mutate(Total.sales = January+February+March+April+May+June+July+August+September+October+November+December)
train_nnd <- month_sales2[c("City",
"Census2010",
"Total.sales",
"Households.with.Under.18",
"Land.Area",
"Population.Density",
"Total.Families")]
View(Test)
View(test)
num <- ds %>%       # is.na(DIINORMAL) and is.na(month_per) were retained
dplyr::select(c(RID,
vitamin_B12, vitamin_B6, carotene, caffeine, carbohydrate, cholesterol, total_fat, fiber, folic_acid,  # only 36?
garlic, fe, mg, MUFA, niacin, n_3_fatty_acides, n_6_fatty_acides, onion, protein, PUFA,
riboflavin, saturated_fat, se, thiamin, trans_fat, vitamin_A, vitamin_C, vitamin_D, vitamin_E, Zn,
Green_black_tea, Flavan_3_ol,  Flavones, Flavonols, Flavonones, Anthocyanidins, Isoflavones, FU1_case, month_per))  #60234, ?compare result when month_per NA <- 0
# Describe
glimpse(num)
# Exclude missing - 134 cases
num <- na.omit(num)
# Exclude zero variance feature
head(num[ , which(apply(num, 2, var) == 0)])  #None
# Creating train and test set  ? train:test:validation  70:15:15
set.seed(1)
train.index <- createDataPartition(num$FU1_case, p = .8, list = FALSE)   #error when unique(as.numeric(raw$thyroid))
#train.index[1] == dat5$thyroid
train <- num[train.index,] %>% #128425
mutate(index = "train")
test <- num[-train.index,] %>%
mutate(index = "test") #32106
#PCA
# ?Scaling or normalization
pca <- prcomp(train[,2:37], scale=T)   # 3:182 * scale=T,  cor=? #Scaling, compare with the result ..manual scale
head(ds[which(RID %in% train$RID))
head(ds[which(RID %in% train$RID)
]
)
head(ds[which(ds$RID %in% train$RID)])
head(ds[which(ds$RID %in% train$RID),])
cov_train <- ds[which(ds$RID %in% train$RID),c('sex','age_c','Smoke', 'Alcoholgp', 'DS1_DM', 'Active')]
cov_test <- ds[which(ds$RID %in% test$RID),c('sex','age_c','Smoke', 'Alcoholgp', 'DS1_DM', 'Active')]) #?check if indices of these 2 sets match train/test set
cov_test <- ds[which(ds$RID %in% test$RID),c('sex','age_c','Smoke', 'Alcoholgp', 'DS1_DM', 'Active')] #?check if indices of these 2 sets match train/test set
